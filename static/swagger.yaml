openapi: 3.0.3
info:
  title: Magic the Gathering (MTG) Card Trading Application
  description: |-
    This is a Magic the Gathering (MTG) card trading application that allows you to keep a collection of your cards and
    make them available for trading with your friends.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: /
tags:
  - name: card
    description: Manage the cards in your collection.
  - name: user
    description: Sign up and login functionality.
  - name: trade
    description: Create trades with other users and swap cards from your collections.
paths:
  /register/:
    post:
      tags:
        - user
      summary: Register as a trader
      description: Register as a trader in the application
      operationId: register
      requestBody:
        description: Register as a new trader
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
        '405':
          description: Validation exception
  /login/:
    post:
      tags:
        - user
      summary: Login to application
  /card/:
    post:
      tags:
        - card
      summary: Add card to collection
  /trade/:
    post:
      tags:
        - trade
      summary: Create a new trade
  /trade/{id}/:
    get:
      tags:
        - trade
      summary: Get trade by trade ID
      description: Private endpoint accessible only to users who are logged in. Get the details of all trade to which you are a party. Users can only see details of trades that they are parties to - if they request to see trades of other users, they will get a Forbidden response.
    put:
      tags:
        - trade
      summary: Update trade you have created which is still in Pending status.
      description: Private endpoint accessible only to users who are logged in. Update a trade you have created and is still in pending status.  Only the trade creator can access this endpoint.  If you try to update someone else's trade or an approved/rejected trade, you will get a Forbidden message.  The trade is updated with the information sent in the request.
    delete:
      tags:
        - trade
      summary: Delete a trade you have created and is still in pending status.
      description: Private endpoint accessible only to users who are logged in. Delete a trade you have created and is still in pending status. Only the trade creator can access this endpoint. If you try to delete someone else's trade or an approved/rejected trade, you will get a Forbidden message.  If a trade is successfully deleted, it is removed from the trade table.
  /trade/{id}/approve:
    put:
      tags:
        - trade
      summary: Approve a trade proposed by another trader that is in Pending status.
      description: Private endpoint accessible only to users who are logged in. Approve a trade proposed by another trader. Only the counterparty to a trade can approve it. If you are not a trade counterparty, you will get a Forbidden response. Only a trade in status `Pending` can be approved. Once a trade is approved, an update to the cards table is made - card ownership is changed for the cards listed in the trade.
  /trade/{id}/reject:
    put:
      tags:
        - trade
      summary: Reject a trade proposed by another trader that is in Pending status.
      description: Private endpoint accessible only to users who are logged in. Reject a trade proposed by another trader. Only the counterparty to a trade can reject it. If you are not a trade counterparty, you will get a Forbidden response. Only a trade in status `Pending` can be rejected.
  /trader/{id}/cards:
    get:
      tags:
        - user
      summary: Gets the cards available in a user's collection.
      description: Private endpoint accessible only to users who are logged in. Gets the cards available in a user's collection. Users can only see their own collection - if they request to see the collection of another user, they will get a Forbidden response.
components:
  schemas:
    User:
      properties:
        first_name:
          type: string
          example: "Aleksandra"
        last_name:
          type: string
          example: "Angelova"
        city:
          type: string
          example: "Sofia"
        email:
          type: string
          example: "aleksandra.angelova@test.com"
        password:
          type: string
          example: "6235ADSWWSOFJgdkfghje#"
